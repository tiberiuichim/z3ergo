Builtin features
================

Web publishing
--------------
The main role of Zope is to publish webpages. Although Zope can work with
more then the http protocol, many of the Zope libraries deal with this problem.
The way in which Zope achieves web pages publishing is to associate pages
to a graph (tree) of objects. Most of the times these objects are persistent,
coming from ZODB, but they can be just as well "transient" objects. 

Object persistency
------------------
By default the user data is saved in an object database called ZODB. Lately,
with the appearance of the ORM libraries also appeared libraries that make it
possible to publish objects that represent database data. The main problem that
the ORM to Zope integration libraries solve is that of the transaction 
mechanism. If an error appears in the code that generates the page or processes
the user data, the data will not be saved in the database, thus preserving the
integration of the data.

API for developing applications
-------------------------------
Zope 3 enjoys a rich ecosystem of libraries that cover most of what is necessary
to develop web applications. The Zope API is well documented and stable. In  
case one of the libraries is deprecated, the backwards compatibility is 
maintaned. Thanks to the extensive usage of zope.interface in most of Zope's
libraries, the API is self-documenting, and thanks to the extensive usage of
the adaption design pattern, extending and changing the default behaviour of 
those libraries is easy to achieve. Just the same, it is easy to write code that
makes it easy for third parties to extend.

Extensible templating system
----------------------------
Although Zope can use any templating engine, the default integration is with the
ZPT engine. There are two implementations for ZPT: the classic one and 
**z3c.pt**, a new library, compatible with the ZPT syntax and integrated with 
Zope, but that offers a better rendering speed by a factor of at least 10 times.
In Zope, the ZPT templating system can be extended with new expression types.

Templating models
-----------------
Zope offers several high level models of integrating content into templates:
the **content providers**, that insert content according to the the type of 
context, the **viewlets**, an extensible form of management of the content 
providers and **pagelets**, which separate the content of an html fragment 
(page or view) from the layout used for that piece of content.

Indexing and search system
--------------------------
Zope offers an integrated system of indexing objects, offering by default 
indexes for Text and arbitrary values (Field). Writing a new type of index is 
not a complicated task, thanks to the simple API that needs to be implemented.
This makes it possible to easily integrate specialized search systems such as
Lucene or Xapian.

Object adnotation
-----------------
One of the innovative concepts integrate by Zope 3 is that of object annotation.
This mechanism, facilitated by ZCA, allows annotating any object (persistent
or transient) with data, so that its functionality can be extended.

Internationalization
--------------------
Zope 3 offers an internationalization mechanism compatible with the **gettext**
standard. This mechanism has extensions for ZPT and there is an easy to use
API from Python. Also, there are mechanism to localize (format numbers, dates
and time) and also a database with regional differences that are involved in 
localization. There are tools to extract the messages from zcml, zpt and 
python files and to integrate them in already generated po files. To 
internationalize content there are several extensions created by the Zope
Community.

Events
------
A very easy and elegant way of providing insertion point to extend 
functionality, events are also used in Zope 3. During normal processing, there 
are a large number of events defined and triggered. Among the most important 
are the ones connected to the object lifecycle (creating, adding, modifying
and erasing objects).

Web forms
---------
Zope offers two libraries to generate, validate and process web forms, and the
Zope community has developed a new package (z3c.form), which offers a similar,
but more advanced and flexible compared to the provided Zope form library.

Security
--------
Security is one aspect where Zope is very strong. The system integrated in Zope
abstracts the interaction of external agents (users) and offers a mechanism
based on permission, groups and roles. Implicit, there are two levels of 
security checks: per published page and per object.

Code test libraries
-------------------
Zope makes it possible to automatically test the code (testing is strongly
encouraged by the Zope community). There is integration with the test mechanisms
offered by default by Python, and there is also the possibility to have 
integration and functional tests, to test the entire system.

Other protocols
---------------
Zope offers a simple way to queue messages for sending, including in 
asynchronous mode. Also, it is possible to publish the objects through various
other protocols, such as WebDAV, FTP and XMLRPC.
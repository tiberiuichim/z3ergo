Some recipes for tipical problems
=================================

Using marker interfaces to define capabilities
----------------------------------------------

A marker interface is an "empty" interface, that usually inherits directly 
``zope.interface.Interface``. Using these interfaces, we can define capabilities
and implement them in an abstract, reusable way. Declaring that a class 
implements the capability means that we can also benefit from a default 
implementation, which can be overriden if needed. Example:

Let's assume that we want a reusable solution to add comments. Each comment 
will be stored in objects of type ``IComment``, and these comments will be 
stored in object annotations. In a CMS environment, for what object types the 
`Add comment` button will be shown? To take as a clue the fact that the object
is annotatable is not enough: not all annotatable objects need to be 
commentable. The solution is simple: we will create a marker interface:: 

    class IHasComments(Interface):
        """This type of objects can be commented"""
        
The adapter used for the factory that generated the object addnotation can be::       

    class IComments(Interface):
        """Object comments"""
    
    class Coments(BTreeContainer):
        implements(IComments)
        adapts(IHasComments)
        
        def add_comment(self, *args, **kwds):
            self[u"Comment %s" % len(self)] = Comment(*args, **kwds)

If we have an object of type BlogEntry, it is sufficient to mark it as being
"commentable"::        

    class BlogEntry(Persistent):
        implements(IBlogEntry, IHasComments)

A viewlet that presents a fragment with the comments for the current object with
the "Add comments" button, can be like this::    

    class CommentsViewlet(BaseViewlet):

        @property
        def available(self):
            return IHasComments.providedBy(self.context)
        
The code that adds the comments to objects can be like::

    IComments(some_blog_entry).add_comment(...)
    IComments(some_other_object_type).add_comment(...)
    
Object adnotation
-----------------
Another concept introduced by Zope 3 with the purpose of maintaing object as
"clean" as possible is the annotation. With the annotation we can attach 
additional data to objects. For example, let's suppose we have objects of type
``Boardgame``::

    class IBoardgame(Interface):
        name = zope.schema.TextLine(title=u"Game name"
    
    class Boardgame(Persistent):
        implements(IBoardgame)
        
        name = u""
    
We want to attach objects with the dates when the game was used. This dates sit
in objects of type ``UsageInfo``::

    class IUsage(Interface):
        date = Date(title=u"Date of usage")
    
    class Usage(Persistent):
        date = None
        
        def __repr__(self):
            return "Used at %s" % self.date

The list will be implemented by annotating the ``Boadgame`` objects with 
information of type ``IUsageInfo``::
 
    class IUsageInfo(Interface):
        usages = List(  title=u"Dates when used",
                        value_type=Object(title=u"Usage",
                                          schema=IUsage)
                      )
    
    class UsageInfo(Persistent):
        implements(IUsageInfo)
        adapts(IBoardgame)
        
        usages = None
    
Objects of type UsageInfo will be stored in the annotation for objects of type
``IBoardgame``. The annotation itself is an adapter that is built using the 
``factory`` function from ``zope.annotation.factory``.

    >>> from zope.annotation.factory import factory
    >>> usage_info_annotation = factory(UsageInfo)
    >>> zope.component.provideAdapter(usage_info_annotation)

Usually, the configuration of that last line is done in ZCML, like so:

.. code-block:: xml

    <zope:adapter factory=".annotations.usage_info_annotation" />

Finally, using the annotation in code is simple:

    >>> usage_info = IUsageInfo(some_boardgame)
    >>> usage_info.usages.append(Usage(datetime.datetime.now()))
    >>> print usage_info.usages

Adnotarea nu este ceva care sa fie in mod implicit asigurat tutoror obiectelor
persistente. Pentru ca adnotarea sa fie disponibila pentru un obiect, acesta
trebuie sa fie adaptabil la interfata ``IAnnotations`` (de exemplu, ar putea sa 
existe un adaptor care sa stocheze adnotarea obiectelor intr-un RDB). In cazul
obiectelor persistente bazate pe ZODB, acestea pot fi facute usor adaptabile
prin marcarea claselor acestora ca implementand interfata 
``zope.annotation.interfaces.IAttributeAnnotatable``. Exista un adapter care
adapteaza acest tip de obiecte la interfata IAnnotations prin stocarea 
adnotarilor intr-un atribut ``__annotations__``. 

DublinCore
----------
The ``DublinCore`` information is handled with the help of the 
``zope.dublincore`` library. By default, the DC information is stored for all
persistent annotatable objects. Because of this, to benefit from ``DublinCore``,
objects need just to be marked with their class as implementing 
``IAttributeAnnotatable``.

**DublinCore** represents a lot of attributes and information and because of 
this, if the default behaviour needs to be modified, the implementation process
for this interface needs to be optimized. There are two ways of achieving this: 

The first, we can declare an attribute as being a ``DublinCore`` property::

    from zope.dublincore.property import DCProperty
    class Book:
        implements(IBook)
        name = DCProperty("title")
        authors = DCProperty("creators")

Second way involves manually creating the DC adapter using a `factory` and in
this case we can also specify a mapping between the DC fields and the object
attributes.::

    dc_annotation = partialAnnotatableAdapterFactory({
                                    'name':'title', 
                                    'author':'creators'
                                    })

The adapter is configured this way:

.. code-block:: xml
                                        
    <zope:adapter 
        for=".interfaces.IBook" 
        factory=".annotations.dc_annotation" 
        provides="zope.dublincore.interfaces.IZopeDublinCore"/>
        
        
Creating relationships between objects
--------------------------------------
Let's say we have a folder with images from racings, and we wish to assign
a list of images to object of type Pilot, Team or Stadium::

    class IHasImages(Interface):
       """marker, objects have pointers to images"""
    
    class Pilot:
       implements(IHasImages, IAttributeAnnotatable)
       #it is wrong to have IHasImage inherit IAttributeAnnotatable
       #HasImages says something about behaviour, IAttributeAnnotatable is 
       #already about how you implement the IAnnotations 
    
    class Team(Persistent):
       implements(IHasImages, IAttributeAnnotatable)
    
    class Stadium(Persistent):
       implements(IHasImages, IAttributeAnnotatable)
       
    class PicturesAlbum(BTreeContainer): 
       contains(IImage)
    
    class IPicturesInfo(Interface):
       images = List(title=u"Image",
                     value_type=Relation(title="Relation")
                     )
    
    class PicturesInfoAnotation(Persistent):
        implements(IPicturesInfo)
        adapts(IHasImages)
        
        images = None
       
    from zope.annotation.factory import factory
    annotation_factory = factory(PicturesInfoAnotation, 'images_pointers')

The code that uses this annotation is simple::
             
    IPicturesInfo(pilot_instance).images.append(img) 
    del IPicturesInfo(team_instance).images[somename] 


Internationalising content with z3c.language.switch
---------------------------------------------------
The following implementation is based on a real implementation for a Zope 3 
based portal. The queryAttribute method of the II18n interface was redefined
to introduce a mechanism that allows getting a value (for the default language)
instead of an empty value when there is no translation for that language/value.
::

    class GameI18NInfo(Persistent):
        """The game content object"""
    
        name = FieldProperty(IGame['name'])
        description = FieldProperty(IGame['description'])
        promo_message = FieldProperty(IGame['promo_message'])
    
    
    class Business(I18n, BTreeContainer, Contained):
        """ """
        _factory = BusinessI18NInfo
        _defaultLanguage = 'en'
    
        implements(IGame)
    
        name = I18nFieldProperty(IGame['name'])
        address = I18nFieldProperty(IGame['address'])
        description = I18nFieldProperty(IGame['description'])
        promo_message = I18nFieldProperty(IGame['promo_message'])
    
        def queryAttribute(self, name, language=None, default=None):
            #override so that we never return empty stuff
            value = super(Game, self).queryAttribute(name, language, default=None)
            if value is None:
                negotiator = getUtility(INegotiator, context=self)
                lang = negotiator.serverLanguage
                try:
                    value = self.getAttribute(name, language=lang)
                except KeyError:
                    pass
            if value is None:
                #try to return something meaningful
                langs = self.getAvailableLanguages()
                if langs:
                    lang = langs[0]
                try:
                    value = self.getAttribute(name, language=lang)
                except KeyError:
                    pass
            if value is not None:
                return value
            else:
                return default
            
Changing the traversing with z3c.traverser
------------------------------------------
The following example uses a case where a series of images are stored in an 
folder that is set as annotation for objects of type ``Game``. Because of the
fact that the annotation is not directly traversable, we publish the images on
the web as being in a `virtual folder` called *images* by changing the 
traversing mechanism for objects of type ``Game``. The ``z3c.traverser`` 
introduces a plugin based mechanism that allows changing the traversing, 
per object. The first zcml registration changes the publisher for ``IBusiness``
object types, while the second registers the plugin for this publisher
(this mechanism is detailed in the ``z3c.traverser`` documentation).

.. code-block:: xml

  <view
    for=".interfaces.IGame"
    type="zope.publisher.interfaces.browser.IBrowserRequest"
    provides="zope.publisher.interfaces.browser.IBrowserPublisher"
    factory="z3c.traverser.browser.PluggableBrowserTraverser"
    permission="zope.Public">
    setup plugin traversal for the IGame
  </view>

  <subscriber
    for="lovely.reviewportal.app.interfaces.IGame
         zope.publisher.interfaces.browser.IBrowserRequest"
    provides="z3c.traverser.interfaces.ITraverserPlugin"
    factory=".traversing.GameTraverserPlugin" />

.. code-block:: python

    class GameTraverserPlugin(ContainerTraverserPlugin):
        """Traversing to games/images will return the annotation of 
        GameImagesAlbum for the Games:
        """
    
        def publishTraverse(self, request, name):
            if name == "images":
                images = IGamesImagesAlbum(self.context)
                proxied_images = LocationProxy(images, container=self.context,
                                               name="images")
                return proxied_images
            if name == "promotions":
                promotions = IPromotions(self.context)
                proxied_promotions = LocationProxy(promotions,
                                                   container=self.context,
                                                   name=name)
                return proxied_promotions
    
            subob = self.context.get(name)
            if subob is None:
                raise NotFound(self.context, name, request)
            return subob

Advanced templating methods
---------------------------
In the case of a "classic" Zope 2 website, the way the templates need to be 
created is obvious: a template for the layout of the site, macros and slots to
fill the templates and, maybe, the CMF based skin overriding mechanism. Plone
is one example of application that has been using this mechanism succesfully.

With Zope 3, considering the amount of choices that can be made, this mechanism
is not so clear. We will analyse several of these choices, in the context of a
website for a multi-national company.

Inserting HTML content directly
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This method of including content from another page (let's call it template for
now) is similar to the ``include()`` from PHP. In Zope we have the advantage
that the "template" is aware of the object to which it is applied. Example:: 

    <div tal:replace="structure context/@@footer" />

Simple, but with a few problems: on each page of the site will need to be copied
the base structure of the website and then have the specific parts of the page
inserted in clearly marked areas. For a site with more then just a few pages 
this method makes it difficult to change the basic structure of the site, 
because all the pages on the site will need to be updated.

METAL: macros and slots, just like classic Plone
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The classic method of separating the layout of the site from the content of the
page is to use the METAL extension, with macros and slots. For example:

First we have the template of the site, called ``template.pt``. 

.. code-block:: xml

    <html metal:define-macro="page">
        <head metal:define-slot="header">
            <title>Some title</title>
        </head>
        <body metal:define-slot="body">
            Body content comes here
        </body>
    </html>

Then we want to make the macro available. We will develop a page called 
``view_macros`` and we will add it to the ``page_macros`` tuple of the view
``standard_macros``. This view is a special browser view that implements the
interface ``zope.interface.common.mapping.IItemMapping`` (see, for details
``standard_macros.py`` from ``zope.app.basicskin`` and ``zope.app.rotterdam``). 
This view has a list of names of pages that contain macros and a list of aliases  
aliasuri between macros. Finally, the macro is included in the page:

.. code-block:: xml

    <html metal:use-macro="context/@@standard_macros/page">
        <head metal:fill-slot="header">
            <title>MyTitle</title>
        </head>
        <body metal:fill-slot="body">
            Content here...
        </body>
    </html>

Another method of "finding" the macros inside a template is to put a reference 
to the template with macros, from the page class::

    class MainPage(BrowserPage):
        macros = ViewPageTemplate('/path/to/macros.pt')

Inside the template associated with MainPage, we can insert the macro with::

    <div metal:use-macro="view/macros/some_macro">

z3c.macro: simplified registration of macros 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Using z3c.macro, the registration of new macros becomes an easy task, that 
doesn't involve redefining or change a page class. For example, to register
the ``page`` macro from ``template.pt``, we need the following zcml:

.. code-block:: xml

    <configure xmlns:z3c="http://namespaces.zope.org/z3c">
        <z3c:macro template="template.pt" name="page" />
    </configure>

The macro is then inserted in pages with:

.. code-block:: xml

    <html metal:use-macro="macro:page">
    ...
    </html>

Content providers
-----------------
Taking the example of the multinational company, let's suppose that we have a
navigation menu for the site. If we develop the site just with macros, we woud
write a macro that will be inserted in the main template. What if we want to
change the navigation menu just for a few pages from the site. There are two
solutions:

* insert a lot of logic in the macro, that will check all the special cases.
  Ugly, complicated, we want to avoid this case 
* restructure the menu as a view that can be defined per context. This solution
  works in the case that we want to redefine the menu per type of context, but 
  not if we want to modify the menu based on the page where it appears.

The solution offered by Zope 3 is solving the problems of the second point:
define a new type of view that takes into account also the view where it is 
inserted: the **content provider**. Thanks to interfaces, it is easy to redefine
the content of the provider based on type of context, request (skin) and page
(interface or the class implementing the page). For example, in our site we 
could define the navigation menu that would be inserted on each page  
like this::
 
    from zope.contentprovider.interfaces import IContentProvider
    from zope.publisher.interfaces.browser import IDefaultBrowserLayer
    from zope.publisher.interfaces.browser import IBrowserView
    
    class MainSiteNavigation(object):
        implements(IContentProvider)
        adapts(Interface, IDefaultBrowserLayer, IBrowserView)
    
        def __init__(self, context, request, view):
            self.context = context
            self.request = request
            self.__parent__ = view
    
        def update(self):
            pass
    
        render = ViewPageTemplateFile('navigation.pt')

This content provider will be registerd with::

    <adapter 
        factory=".browser.MainSiteNavigation" 
        name="main_site_navigation" />

To override the provider, for example for objects of type PressRelease, we will
use::

    class PressReleasesNavigation(object):
        adapts(IPressRelease, IDefaultBrowserLayer, IBrowserView)
        render = ViewPageTemplateFile('press_releases_navigation.pt')

.. code-block:: xml

    <adapter 
        factory=".browser.PressReleasesNavigation" 
        name="main_site_navigation" />

This way, using the content providers allows breaking the web pages into 
reusable components. Using the registration of this multiadapter with a name,
it can be inserted into templates using the expression ``provider``::

    <div tal:content="structure provider:lj.MyProvider" />

To generate the content of the content providers, a two phase rendering process
is used. First the ``update`` method is called, then the ``render`` 
method is used to actually generate the content of that content provider. 

Viewlets and viewlet managers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Viewlets represent a step forward in the direction taken by the content 
providers: a viewlet manager is actually a content provider that agregates
"mini-views" and inserts them in pages. These mini-views are the viewlets that
are defined as multiadapters for context, request (layer), view and the 
viewlet manager interface. Using the viewlet mechanism we can decouple the 
content from the template or the context where it will be inserted: we can 
control what "boxes" appear on each page by adding registration of viewlets,
no longer needing to edit macros, templates or a lot of code.

The ``zope.viewlet`` package offers two new ZCML tags: 
``browser:viewletManager`` and ``browser:viewlet``. When the viewlet manager is
registered, it is also possible to specify a class that will generate it and a
template that will be used to render the viewlets, so it is possible to control
how the viewlets are sorted and how are inserted into pages.

Although can be tempting, the idea of transforming an entire page and site in
a structure based on viewlets is dangerous: forms in viewlets are hard to 
implements, pages will be hard to define and manage (there is no clear picture,
in code, over what appears on the page). I recomended that at least the main 
part of the page to not be defined with viewlets, but with pagelets, as 
described lower.

A practical example:

* we define a marker interface for the viewlet manager:

    .. code-block:: python

        from zope.viewlet.interfaces import IViewletManagere
        class IExtraStuffBox(IViewletManager):
            '''Viewlets for the extra stuff box'''

* we register the viewlet manager:

    .. code-block:: xml
    
        <browser:viewletManager
            name='zope3tutorial.ExtraStuffBox'
            provides='.interfaces.IExtraStuffBox'
            permission='zope.View'
            layer='.demoskin.IMySkin'
            />

* we insert this in the main template of the site:
    
    .. code-block:: xml
    
        <div tal:replace="structure provider:zope3tutorial.ExtraStuffBox">
            A box for extra stuff
        </div>

* write a viewlet:

    >>> class SizeViewlet(object):
    ...
    ...     def __init__(self, context, request, view, manager):
    ...         self.__parent__ = view
    ...         self.context = context
    ...
    ...     def update(self):
    ...         pass
    ...
    ...     def render(self):
    ...         return size.interfaces.ISized(self.context).sizeForDisplay()
    ...
    >>> zope.component.provideAdapter(
    ...     SizeViewlet,
    ...     (IFile, IDefaultBrowserLayer,
    ...      zope.interface.Interface, interfaces.IViewletManager),
    ...     interfaces.IViewlet, name='size')

    In ZCML, the viewlet registration will be:
    
    .. code-block:: xml 
    
        <browser:viewlet
            name="size"
            for="IFile"
            manager="interfaces.IViewletManager"
            class="SizeViewlet"
            permission="zope.View"
            />

* The viewlet can be declared also just using a template

    .. code-block:: xml
    
        <browser:viewlet
            name="fortune"
            for="*"
            manager='.interfaces.IExtraStuffBox'
            template='fortune.pt'
            layer='.demoskin.IMySkin'
            permission='zope.View'
            />

Separate the template registration from the view class with z3c.viewtemplate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Continuing with our study case, let's assume that this company has multiple
websites, generated by the same Zope application, one for each country with the
content being almost identical, but layouts and templates slightly different.
In this case, the multiple skins applied to the base application could work,
with the only problem being that it would require subclassing to redefine, per
skin, the template used for a view class.

One of the possible solutions is provided by the z3c.viewtemplate package, which
allows registering the template separately from the page and thus makes it 
possible to simply redefine the used template, per browser layer.

As an example, let's change the front page of one of the skins, to add a new
column. We have the ``MainSitePage`` class for the front page, with the template
``main_site.pt`` and we wish to change the template. To benefit from the 
z3c.viewtemplate package, we will need to change the MainSitePage class to have
something like::

    class MainSitePage(object):
        template = RegisteredPageTemplate()
    
        def __call__(self):
            return self.template()

or we can simply inherit ``BaseView`` from ``z3c.viewtemplate``::

    class MainSitePage(BaseView):
        ...

Then we can register the template, per layer:

.. code-block:: xml

    <browser:template 
        for=".browser.MainSitePage" 
        template="main_page.pt" 
        layer=".SkinLayerOne" />

We can also override the templates for viewlets, if we use a superclass like::

    class BaseViewlet(object):
    
        template = RegisteredPageTemplate()
    
        def render(self):
            return self.template()

In practice, the structure will look like:

* a main template for the site that will provide the layout and will insert the
  viewlet managers. This layout will be provided as macro called ``page`` 
* the site pages will use the ``page`` macro and will insert their content in
  the macro slots
  
Using an inteligent inheritance mechanism, it is possible to reduce to a minimum
the necesity to define new templates.

z3c.template, an improved version of z3c.viewtemplate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
z3c.template is a package similar to z3c.viewtemplate (allows separating the
page code from the template registration), but also allows separating the 
layout of a page from its content and "main" template.

Let's assume that we implement a website with z3c.template and we have a page
for press releases. For each page we will have a template for the layout and
one for the content, but we can skin defining the template for the layout if we
inherit a base class. The layout template will contain:

.. code-block:: xml

    <html>
    <head>
        <title tal:content="view/title" />
    <head>
    <body>
        <div tal:replace="view/render" />
    </body>
    </html>

This template will be registered:

.. code-block:: xml

    <configure xmlns:z3c="http://namespaces.zope.org/z3c">
        <z3c:layout template="main_template" for=".interfaces.ISitePage" />
    </configure>

We need a browser view that will know how to use the layout template and the 
content template::

    class SitePage(BrowserPage):
        zope.interface.implements(ISitePage)
    
        template = None
        layout = None
    
        title = None
    
        def update(self):
            pass
    
        def render(self):
            if self.template is None:
                template = zope.component.getMultiAdapter(
                         (self, self.request), IContentTemplate)
                return template(self)
            return self.template()
        
        def __call__(self):
            self.update()
            if self.layout is None:
                layout = zope.component.getMultiAdapter((self, self.request),
                              interfaces.ILayoutTemplate)
                return layout(self)
            return self.layout()

Our page class for the press releases will inherit the ``SitePage`` class::

    class PressReleaseViewPage(SitePage):
    
        @property
        def title(self):
            return u"Press release: " + self.context.title

We can then inherit the template for content and page:

.. code-block:: xml

    <configure xmlns:z3c="http://namespaces.zope.org/z3c">
        <z3c:template template="press_review_view.pt" for="IPressReview" />
    </configure>

Although the mechanism is easy to implement and understand, it involves some
work in supporting forms, and why write the ``SitePage`` class, when there is
a package that already has this? This is...

z3c.pagelet
~~~~~~~~~~~
This package introduces a new type of browser page: the pagelet. A pagelet is a
page with a separate template for layout: the layout is defined using the 
mechanisms introduced by ``z3c.template``, but the ``SitePage`` class is no 
longer necessary as it is provided by the package. Inside the layout template,
where the real content needs to be inserted, the pagelet provider is inserted::

    <div tal:replace="structure provider: pagelet" />

Other "goodies" included in the package:

* integration with the form classes from ``zope.formlib``
* using z3c.skin.pagelet we have a base skin that can be used as a start for
  a pagelet based website, including all the exceptions as pagelets
  
To register a pagelet the following ZCML is used (notice the similarity with the
page registration):

.. code-block:: xml

  <z3c:pagelet
      name="index.html"
      for=".interfaces.PressRelease"
      class=".views.IndexPagelet"
      layer=".interfaces.ICompanyWebsiteLayer"
      permission="zope.View"
      />


Other packages useful in templating
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* z3c.pt: an implementation of ZPT templates that is faster (by ~ 10 times)
* z3c.macroviewlet: define macros in templates as viewlets, allowing easy 
  registration of a website that is completely made from viewlets
* z3c.formui: integrate the pagelets with the z3c.form library
      
Some tips
---------
* the Zope source code is simple and easy to understand. If there is no 
  documentation, read the source code, starting with the interfaces and then the
  configure.zcml file, to undersand what that package does. Use the APIDOC and
  Zope book tools to understand the documentation. Use the introspection page
  for object to understand their structure.
* use namespaces
* separate the "backend" part from the "frontend" part in different 
  sub-packages: `app` and one of `browser`, `skin` or `ui`.
* keep a balance between the necesity to separate into packages and a number too
  high of packages, with deep interdependencies
* use the Zope Community packages (z3c), they are often newer and more flexible
  then the ones that Zope has. Example: z3c.form, z3c.pagelet, z3c.table, etc.
* when you design a library or reusable components, it is very easy to create an
  infrastructure based on the ZCA, with multiple insertion points. A balance 
  needs to be maintained, to prevent the package from imposing a too high 
  requirement when the library is used (for example: implement an adapter for 
  this interface, another utility for that interface, etc). It can happen that,
  when the developer wants to use that component, to be easier to completely
  override the entire component. Make sure that you ensure one unique "override"
  point, that would make it possible to override the entire mechanism. But:
* try to make the components generally available, to be reusable. On the long 
  term, this is one of the advantages of using Zope 3: components are easy to 
  develop so that they are reusable
* it's not necessary to have a big level of integration with ZMI
* don't start a big application as your first on Zope 3, start with a small 
  project first      